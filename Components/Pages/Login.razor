@page "/"
@using System.Text.RegularExpressions
@rendermode InteractiveServer

<style>
    .yellow-border-focus > .mud-input-control-input-container > .mud-input.mud-input-outlined > input:focus-within ~ .mud-input-outlined-border{@($"border-color: {Colors.Yellow.Darken2};")}
    .yellow-border-hover > .mud-input-control-input-container > .mud-input.mud-input-outlined > input:hover ~ .mud-input-outlined-border{@($"border-color: {Colors.Yellow.Darken2};")}
    .yellow-border > .mud-input-control-input-container > .mud-input.mud-input-outlined >  .mud-input-outlined-border{@($"border-color: {Colors.DeepOrange.Darken2};");}
    .error-color{color: red;}
</style>

<MudAppBar Fixed="false" Elevation="0" Style="@($"background:{Colors.Yellow.Lighten3}; height: 8vh;")">
    <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Size="Size.Medium" style="@($"color: {Colors.Yellow.Darken4};")" Href="https://github.com/adam-polak/LemonChat" Target="_blank" />
    <MudSpacer />
    <MudText Style="@($"color:{Colors.Yellow.Darken4}; font-size: 1.75em; font-weight:900;")">LemonChat</MudText>
</MudAppBar>

<MudPaper Style="@($"background-color: {Colors.Yellow.Lighten2}; height: 50%; width: 50%; margin: 10% auto; padding: 5%; border-radius: 10px;")">
    @if(_displayStart)
    {
        <MudButton @onclick="ToggleLogin" Style="@($"background-color: {Colors.Amber.Lighten2}; color: {Colors.Yellow.Darken4}; font-size: 2em; font-weight:900; width: 100%; margin-bottom: .5em;")">Login</MudButton>
        <MudText class="text-center" Style="@($"color: {Colors.Yellow.Darken4}; font-size: 2.5em; font-weight:900; margin-bottom: .5em;")">OR</MudText>
        <MudButton @onclick="ToggleCreateUser" Style="@($"background-color: {Colors.Amber.Lighten2}; color: {Colors.Yellow.Darken4}; font-size: 2em; font-weight:900; width: 100%;")">Create User</MudButton>
    } else if(_displayLogin) {
        <MudButton @onclick="ToggleLogin" Style="@($"background-color: {Colors.Amber.Lighten2}; color: {Colors.Yellow.Darken4}; font-size: 2em; font-weight:900; width: 100%; margin-bottom: 1em;")">Go Back</MudButton>
        <MudForm @onsubmit="TryLogin">
            <MudText>Username</MudText>
            <MudTextField ShrinkLabel class="yellow-border yellow-border-focus yellow-border-hover" @bind-Value="user.Username" Placeholder="Enter username" Variant="Variant.Outlined"></MudTextField>
            @if(_lettersError)
            {
                <MudText class="error-color">* Username should only contain letters</MudText>
            }
            @if(_incorrectLogin)
            {
                <br>
                <MudText class="text-center error-color">*** Incorrect Login ***</MudText>
            }
            <br>
            <MudText>Password</MudText>
            <MudTextField ShrinkLabel class="yellow-border yellow-border-focus yellow-border-hover" @bind-Value="user.Password" Placeholder="Enter password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordIcon" OnAdornmentClick="ToggleShowPassword" AdornmentAriaLabel="Show Password"></MudTextField>
            @if(_spacesError)
            {
                <MudText class="error-color">* Password can't contain any spaces</MudText>
            }
            <MudButton ButtonType="ButtonType.Submit" Style="@($"background-color: {Colors.Amber.Lighten2}; color: {Colors.Yellow.Darken4}; font-size: 1.5em; font-weight:500; width: 100%; margin-top: .5em;")">Login</MudButton>
        </MudForm>
    } else if(_displayCreateUser) {
        <MudButton @onclick="ToggleCreateUser" Style="@($"background-color: {Colors.Amber.Lighten2}; color: {Colors.Yellow.Darken4}; font-size: 2em; font-weight:900; width: 100%; margin-bottom: 1em;")">Go Back</MudButton>
        <MudForm @onsubmit="TryCreateUser">
            <MudText>Username</MudText>
            <MudTextField ShrinkLabel class="yellow-border yellow-border-focus yellow-border-hover" @bind-Value="user.Username" Placeholder="Enter username" Variant="Variant.Outlined"></MudTextField>
            @if(_lettersError)
            {
                <MudText class="error-color">* Username should only contain letters</MudText>
            }
            @if(_userExistsError)
            {
                <MudText class="error-color">* Username already exists</MudText>
            }
            <br>
            <MudText>Password</MudText>
            <MudTextField ShrinkLabel class="yellow-border yellow-border-focus yellow-border-hover" @bind-Value="user.Password" Placeholder="Enter password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordIcon" OnAdornmentClick="ToggleShowPassword" AdornmentAriaLabel="Show Password"></MudTextField>
            @if(_spacesError)
            {
                <MudText class="error-color">* Password can't contain any spaces</MudText>
            }
            <MudButton ButtonType="ButtonType.Submit" Style="@($"background-color: {Colors.Amber.Lighten2}; color: {Colors.Yellow.Darken4}; font-size: 1.5em; font-weight:500; width: 100%; margin-top: .5em;")">Create User</MudButton>
        </MudForm>
    }
</MudPaper>

@code {

    bool _displayStart = true;
    bool _displayLogin;
    bool _displayCreateUser;
    bool _showPassword;
    bool _userExistsError;
    bool _lettersError;
    bool _spacesError;
    bool _incorrectLogin;
    InputType PasswordInput = InputType.Password;
    string PasswordIcon = Icons.Material.Filled.Visibility;
    UserController userController;

    User user = new User() { Username = "", Password = "" };

    protected override async Task OnInitializedAsync() {
        await Task.Run(() => 
        {
            userController = new UserController(Config.GetConnectionString("Default") ?? "");
        });
    }

    void TurnOffErrors()
    {
        TurnOffFormatErrors();
        _incorrectLogin = false;
        _userExistsError = false;
    }

    void TurnOffFormatErrors()
    {
        _lettersError = false;
        _spacesError = false;
    }

    void TryLogin()
    {
        if(!validUser()) return;
        if(!userController.IsCorrectLogin(user.Username, user.Password))
        {
            _incorrectLogin = true;
            return;
        } else _incorrectLogin = false;
        userController.KillSessionKey(user.Username);
        Navigation.NavigateTo($"/chat/{user.Username}/{userController.CreateSessionKey(user.Username, user.Password)}");
    }

    void TryCreateUser()
    {
        if(!validUser()) return;
        if(userController.ContainsUser(user.Username))
        {
            _userExistsError = true;
            return;
        } else _userExistsError = false;
        userController.CreateUser(user.Username, user.Password);
        user.Username = "";
        user.Password = "";
        ToggleCreateUser();
    }

    bool validUser()
    {
        if(user.Username.Count() == 0 || !Regex.IsMatch(user.Username, @"^[a-zA-Z]+$")) 
        {
            _lettersError = true;
            return false;
        }
        if(user.Password.Count() == 0 || !Regex.IsMatch(user.Password, @"[^-\s]")) {
            _spacesError = true;
            return false;
        }
        TurnOffFormatErrors();
        return true;
    }

    void ToggleShowPassword()
    {
        if(_showPassword)
        {
            PasswordInput = InputType.Password;
            PasswordIcon = Icons.Material.Filled.Visibility;
        } else {
            PasswordInput = InputType.Text;
            PasswordIcon = Icons.Material.Filled.VisibilityOff;
        }
        _showPassword = !_showPassword;
    }

    void ToggleLogin()
    {
        TurnOffErrors();
        if(_showPassword) ToggleShowPassword();
        user.Username = "";
        user.Password = "";
        _displayStart = !_displayStart;
        _displayLogin = !_displayLogin;
    }

    void ToggleCreateUser()
    {
        TurnOffErrors();
        if(_showPassword) ToggleShowPassword();
        user.Username = "";
        user.Password = "";
        _displayStart = !_displayStart;
        _displayCreateUser = !_displayCreateUser;
    }

}