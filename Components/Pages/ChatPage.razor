@page "/chat"
@page "/chat/{RouteUsername}/{Session_Key:int}"
@rendermode InteractiveServer

<style>
    .yellow-border-focus > .mud-input-control-input-container > .mud-input.mud-input-outlined > input:focus-within ~ .mud-input-outlined-border{@($"border-color: {Colors.Yellow.Darken2};")}
    .yellow-border-hover > .mud-input-control-input-container > .mud-input.mud-input-outlined > input:hover ~ .mud-input-outlined-border{@($"border-color: {Colors.Yellow.Darken2};")}
    .yellow-border > .mud-input-control-input-container > .mud-input.mud-input-outlined >  .mud-input-outlined-border{@($"border-color: {Colors.Yellow.Lighten4}");}
</style>

<MudAppBar Fixed="false" Elevation="0" Style="@($"background:{Colors.Yellow.Lighten3}; height: 8vh;")">
    <MudButton @onclick="ToggleChat" Edge="Edge.Start" Style="@($"color:{Colors.Yellow.Darken4}; background:{Colors.Amber.Lighten3}; font-size: 1.2em;")">@DrawerText</MudButton>
    <MudSpacer />
    <MudText Style="@($"color:{Colors.Yellow.Darken4}; font-size: 1.75em; font-weight:900;")">User: @Username</MudText>
    <MudSpacer />
    <MudText Edge="Edge.End" Style="@($"color:{Colors.Yellow.Darken4}; font-size: 1.75em; font-weight:900;")">LemonChat</MudText>
</MudAppBar>
<MudDrawerContainer Style="@($"background:{Colors.Yellow.Darken2}; height; 92vh;")">
    <MudDrawer Overlay="false" Elevation="0" @bind-Open="@_openChat" Style="@($"color:{Colors.Yellow.Darken4}; background:{Colors.Yellow.Lighten4}; height: 92vh;")">
        <div style="padding-left: 100%; height: .5em; width: 50%; background-color:@($"{Colors.Yellow.Darken4}");"></div>
        <br>
        <MudDrawerContainer class="customized-scrollbar" style="padding: 0 5%; overflow: scroll;">
            <MudTextField @bind-Value="CreateChat" class="yellow-border yellow-border-hover yellow-border-focus" Placeholder="New Chat" Variant="Variant.Outlined" Adornment="Adornment.End" OnAdornmentClick="CreateGroup" AdornmentIcon="@Icons.Material.Filled.Add" Style="@($"width: 100%; background:{Colors.Amber.Accent1}; border-radius: 4px;")"></MudTextField>
            <br>
            @foreach(UserInChat group in ChatGroups)
            {
                <MudButton @onclick="() => ChangeGroup(group)" Style="@($"color:{Colors.Yellow.Darken4}; background:{Colors.Amber.Lighten3}; width: 100%; margin: .5em 0;")">@($"{group.Chat_Name}")</MudButton>
            }
        </MudDrawerContainer>
    </MudDrawer>
    <MudMainContent Style="@($"background:{Colors.Yellow.Darken2}; height: 92vh; display: flex; justify-content: center;")">
        <MudContainer style="margin-top: -7vh;">
            <MudTextField @bind-Value="AddUser" class="yellow-border yellow-border-hover yellow-border-focus" Placeholder="Add user to chat" Variant="Variant.Outlined" Adornment="Adornment.End" OnAdornmentClick="AddUserToChat" AdornmentIcon="@Icons.Material.Filled.Add" Style="@($"width: 80%; margin: auto; background:{Colors.Amber.Accent1}; border-radius: 4px;")"></MudTextField>
            <MudPaper Style="@($"background:{Colors.Amber.Accent1}; height:70vh; width: 80%; margin: auto; margin-top: .5em; border-radius: 4px; padding: 2%;")" Elevation="0">
                @foreach(Chat chat in CurrentChat)
                {
                    @if(!chat.Message.Equals(""))
                    {
                        <MudText>@($"{chat.Sent_By}: {chat.Message}")</MudText>
                    }
                }
            </MudPaper>
            <MudTextField @bind-Value="InputChat" class="yellow-border yellow-border-hover yellow-border-focus" Placeholder="Send chat" Variant="Variant.Outlined" Adornment="Adornment.End" OnAdornmentClick="SendChat" AdornmentIcon="@Icons.Material.Filled.Send" Style="@($"width: 80%; margin: .5em auto; background:{Colors.Amber.Accent1}; border-radius: 4px;")"></MudTextField>
        </MudContainer>
        <MudContainer Style="@($"background:{Colors.Amber.Accent1}; color:{Colors.Yellow.Darken4}; height: 90%; width: 30%; margin-top: -6vh; border-radius: 4px; padding: 2%;")">
            @if(curChatId == 0)
            {
                <MudText class="text-center" style="font-size: 1.75em; font-weight: 700;">Create a chat to get started!</MudText>
            } else {
                <MudText class="text-center" style="font-size: 1.75em; font-weight: 700;">@curChatName</MudText>
            }
            <br>
            <div style="height: .5em; width: 100%; background-color:@($"{Colors.Yellow.Darken4}");"></div>
            <br>
            @foreach(string user in UsersInChat)
            {
                <h5 class="text-center">@user</h5>
            }
        </MudContainer>
    </MudMainContent>
</MudDrawerContainer>

@code {

    List<UserInChat> ChatGroups = [];
    List<Chat> CurrentChat = [];
    List<string> UsersInChat = [];
    string curChatName = "";
    int curChatId = 0;
    string DrawerText = "Hide Chats";
    string AddUser = "";
    string InputChat = "";
    string CreateChat = "";
    bool _openChat = true;

    [Parameter]
    public string? RouteUsername { get; set; }

    [Parameter]
    public int Session_Key { get; set; }

    private string Username = "";

    UserController userController;
    ChatInfoController chatInfoController;
    ChatController chatController;

    protected override void OnInitialized() {
        Username = RouteUsername ?? Username;
        string connectionString = Config.GetConnectionString("Default") ?? "";
        userController = new UserController(connectionString);
        if(!userController.IsCorrectLogin(Username, Session_Key)) Navigation.NavigateTo("/");
        chatInfoController = new ChatInfoController(connectionString);
        chatController = new ChatController(connectionString);
        ChatGroups = chatInfoController.ChatsUserIsIn(Username);
        if(ChatGroups.Count != 0) ChangeGroup(ChatGroups.First());
        var timer = new System.Threading.Timer((_) =>
        {
            ChatGroups = chatInfoController.ChatsUserIsIn(Username);
            UpdateChat();
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }, null, 0, 1000);
    }

    void AddUserToChat()
    {
        if(!userController.ContainsUser(AddUser)) return;
        chatInfoController.AddUserToChat(curChatId, AddUser);
        UsersInChat.Add(AddUser);
        AddUser = "";
    }

    void UpdateChat()
    {
        if(curChatId != 0) 
        {
            UsersInChat = chatInfoController.UsersInChat(curChatId);
            if(CurrentChat.Count == 0 || CurrentChat.First().ChatId != curChatId) CurrentChat = chatController.GetChats(curChatId);
            else {
                int largest = CurrentChat.Last().MessageId;
                List<Chat> chats = chatController.GetChats(curChatId);
                if(chats.Last().MessageId > largest) CurrentChat.Add(chats.Last());
            }
        }
    }

    void SendChat()
    {
        if(CurrentChat == null) return;
        chatController.SendChat(curChatId, Username, InputChat);
        InputChat = "";
        UpdateChat();
    }

    void ToggleChat()
    {
        if(_openChat) DrawerText = "View Chats";
        else DrawerText = "Hide Chats";
        _openChat = !_openChat;
    }

    void CreateGroup()
    {
        chatInfoController.CreateChat(Username, CreateChat);
        ChatGroups = chatInfoController.ChatsUserIsIn(Username);
        CreateChat = "";
    }

    void ChangeGroup(UserInChat group)
    {
        curChatId = group.ChatId;
        curChatName = group.Chat_Name;
        UpdateChat();
    }

}